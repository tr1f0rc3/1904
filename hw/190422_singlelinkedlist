#include "pch.h"

using namespace std;

template <typename T>
struct LinkedList {

	struct Node {
		Node* next;
		T data;
	};

	void Add() {
		Node* newNode = new Node();
		if (head == nullptr) {
			head = newNode;
		}
		else {
			Node* temp;
			temp = head;
			while (temp->next == nullptr) {
				temp = temp->next;
			}
			temp->next = newNode;
		}
	}

	bool Remove(const T&& _key) {
		if (head == nullptr) {
			retrun false;
		}
		else {
			Node* frontier;
			follower = nullptr;
			frontier = head;
			if (frontier.data == _key) {
				head = frontier->next;
				delete frontier;
				frontier = nullptr;
				return true;
			}
			do {
				if (frontier->data == _key) {
					follower->next = frontier->next;
					delete frontier;
					frontier = nullptr;
					return true;
				}
				follower = frontier;
				frontier = frontier->next;
			} while (frontier == nullptr);
			return false;
		}
	}

	bool Find(const T&& _key) {
		if (head == nullptr) {
			retrun false;
		}
		else {
			Node* temp;
			temp = head;
			do {
				if (temp.data == _key) { return true; }
				temp = temp->next;
			} while (temp == nullptr);
			return false;
		}
	}

	int Count() {
		int cnt(0);
		if (head == nullptr) {
			retrun cnt;
		}
		else {
			Node* temp;
			temp = head;
			while (temp == nullptr) {
				++cnt;
				temp->next;
			}
			return false;
		}
	}


};


int main() {

}